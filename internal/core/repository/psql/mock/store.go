// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/abdukhashimov/go_api/internal/core/repository/psql/sqlc (interfaces: Querier)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/abdukhashimov/go_api/internal/core/repository/psql/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateBoard mocks base method.
func (m *MockQuerier) CreateBoard(arg0 context.Context, arg1 sqlc.CreateBoardParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoard", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoard indicates an expected call of CreateBoard.
func (mr *MockQuerierMockRecorder) CreateBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockQuerier)(nil).CreateBoard), arg0, arg1)
}

// CreateChronology mocks base method.
func (m *MockQuerier) CreateChronology(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChronology", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChronology indicates an expected call of CreateChronology.
func (mr *MockQuerierMockRecorder) CreateChronology(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChronology", reflect.TypeOf((*MockQuerier)(nil).CreateChronology), arg0, arg1)
}

// CreateDistrictBudget mocks base method.
func (m *MockQuerier) CreateDistrictBudget(arg0 context.Context, arg1 sqlc.CreateDistrictBudgetParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistrictBudget", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDistrictBudget indicates an expected call of CreateDistrictBudget.
func (mr *MockQuerierMockRecorder) CreateDistrictBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistrictBudget", reflect.TypeOf((*MockQuerier)(nil).CreateDistrictBudget), arg0, arg1)
}

// CreateInitiative mocks base method.
func (m *MockQuerier) CreateInitiative(arg0 context.Context, arg1 sqlc.CreateInitiativeParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInitiative", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInitiative indicates an expected call of CreateInitiative.
func (mr *MockQuerierMockRecorder) CreateInitiative(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInitiative", reflect.TypeOf((*MockQuerier)(nil).CreateInitiative), arg0, arg1)
}

// CreateRegion mocks base method.
func (m *MockQuerier) CreateRegion(arg0 context.Context, arg1 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegion", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegion indicates an expected call of CreateRegion.
func (mr *MockQuerierMockRecorder) CreateRegion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegion", reflect.TypeOf((*MockQuerier)(nil).CreateRegion), arg0, arg1)
}

// CreateStatus mocks base method.
func (m *MockQuerier) CreateStatus(arg0 context.Context, arg1 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatus indicates an expected call of CreateStatus.
func (mr *MockQuerierMockRecorder) CreateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockQuerier)(nil).CreateStatus), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(arg0 context.Context, arg1 sqlc.CreateUserParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), arg0, arg1)
}

// CreateVote mocks base method.
func (m *MockQuerier) CreateVote(arg0 context.Context, arg1 sqlc.CreateVoteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVote indicates an expected call of CreateVote.
func (mr *MockQuerierMockRecorder) CreateVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockQuerier)(nil).CreateVote), arg0, arg1)
}

// DeleteChronology mocks base method.
func (m *MockQuerier) DeleteChronology(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChronology", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChronology indicates an expected call of DeleteChronology.
func (mr *MockQuerierMockRecorder) DeleteChronology(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChronology", reflect.TypeOf((*MockQuerier)(nil).DeleteChronology), arg0, arg1)
}

// DeleteDistrictBoard mocks base method.
func (m *MockQuerier) DeleteDistrictBoard(arg0 context.Context, arg1 sqlc.DeleteDistrictBoardParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDistrictBoard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDistrictBoard indicates an expected call of DeleteDistrictBoard.
func (mr *MockQuerierMockRecorder) DeleteDistrictBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDistrictBoard", reflect.TypeOf((*MockQuerier)(nil).DeleteDistrictBoard), arg0, arg1)
}

// DeleteRegion mocks base method.
func (m *MockQuerier) DeleteRegion(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRegion indicates an expected call of DeleteRegion.
func (mr *MockQuerierMockRecorder) DeleteRegion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegion", reflect.TypeOf((*MockQuerier)(nil).DeleteRegion), arg0, arg1)
}

// DeleteStatus mocks base method.
func (m *MockQuerier) DeleteStatus(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatus indicates an expected call of DeleteStatus.
func (mr *MockQuerierMockRecorder) DeleteStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatus", reflect.TypeOf((*MockQuerier)(nil).DeleteStatus), arg0, arg1)
}

// DeleteVote mocks base method.
func (m *MockQuerier) DeleteVote(arg0 context.Context, arg1 sqlc.DeleteVoteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVote indicates an expected call of DeleteVote.
func (mr *MockQuerierMockRecorder) DeleteVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVote", reflect.TypeOf((*MockQuerier)(nil).DeleteVote), arg0, arg1)
}

// DelteDistrictByID mocks base method.
func (m *MockQuerier) DelteDistrictByID(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelteDistrictByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelteDistrictByID indicates an expected call of DelteDistrictByID.
func (mr *MockQuerierMockRecorder) DelteDistrictByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelteDistrictByID", reflect.TypeOf((*MockQuerier)(nil).DelteDistrictByID), arg0, arg1)
}

// GetAllChronology mocks base method.
func (m *MockQuerier) GetAllChronology(arg0 context.Context, arg1 sqlc.GetAllChronologyParams) ([]sqlc.Chronology, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChronology", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Chronology)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChronology indicates an expected call of GetAllChronology.
func (mr *MockQuerierMockRecorder) GetAllChronology(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChronology", reflect.TypeOf((*MockQuerier)(nil).GetAllChronology), arg0, arg1)
}

// GetAllDistrictBudget mocks base method.
func (m *MockQuerier) GetAllDistrictBudget(arg0 context.Context, arg1 sqlc.GetAllDistrictBudgetParams) ([]sqlc.DistrictBudget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDistrictBudget", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.DistrictBudget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDistrictBudget indicates an expected call of GetAllDistrictBudget.
func (mr *MockQuerierMockRecorder) GetAllDistrictBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDistrictBudget", reflect.TypeOf((*MockQuerier)(nil).GetAllDistrictBudget), arg0, arg1)
}

// GetAllInitiatives mocks base method.
func (m *MockQuerier) GetAllInitiatives(arg0 context.Context, arg1 sqlc.GetAllInitiativesParams) ([]sqlc.Initiative, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInitiatives", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Initiative)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInitiatives indicates an expected call of GetAllInitiatives.
func (mr *MockQuerierMockRecorder) GetAllInitiatives(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInitiatives", reflect.TypeOf((*MockQuerier)(nil).GetAllInitiatives), arg0, arg1)
}

// GetAllRegions mocks base method.
func (m *MockQuerier) GetAllRegions(arg0 context.Context, arg1 sqlc.GetAllRegionsParams) ([]sqlc.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRegions", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRegions indicates an expected call of GetAllRegions.
func (mr *MockQuerierMockRecorder) GetAllRegions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRegions", reflect.TypeOf((*MockQuerier)(nil).GetAllRegions), arg0, arg1)
}

// GetAllUsers mocks base method.
func (m *MockQuerier) GetAllUsers(arg0 context.Context, arg1 sqlc.GetAllUsersParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockQuerierMockRecorder) GetAllUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockQuerier)(nil).GetAllUsers), arg0, arg1)
}

// GetAllUsersCount mocks base method.
func (m *MockQuerier) GetAllUsersCount(arg0 context.Context, arg1 sqlc.GetAllUsersCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersCount indicates an expected call of GetAllUsersCount.
func (mr *MockQuerierMockRecorder) GetAllUsersCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersCount", reflect.TypeOf((*MockQuerier)(nil).GetAllUsersCount), arg0, arg1)
}

// GetAllVotes mocks base method.
func (m *MockQuerier) GetAllVotes(arg0 context.Context, arg1 sqlc.GetAllVotesParams) ([]sqlc.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVotes", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVotes indicates an expected call of GetAllVotes.
func (mr *MockQuerierMockRecorder) GetAllVotes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVotes", reflect.TypeOf((*MockQuerier)(nil).GetAllVotes), arg0, arg1)
}

// GetBoardByID mocks base method.
func (m *MockQuerier) GetBoardByID(arg0 context.Context, arg1 string) (sqlc.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardByID indicates an expected call of GetBoardByID.
func (mr *MockQuerierMockRecorder) GetBoardByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardByID", reflect.TypeOf((*MockQuerier)(nil).GetBoardByID), arg0, arg1)
}

// GetDistrictByRegionID mocks base method.
func (m *MockQuerier) GetDistrictByRegionID(arg0 context.Context, arg1 int32) ([]sqlc.District, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistrictByRegionID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.District)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistrictByRegionID indicates an expected call of GetDistrictByRegionID.
func (mr *MockQuerierMockRecorder) GetDistrictByRegionID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistrictByRegionID", reflect.TypeOf((*MockQuerier)(nil).GetDistrictByRegionID), arg0, arg1)
}

// GetInitiativeByID mocks base method.
func (m *MockQuerier) GetInitiativeByID(arg0 context.Context, arg1 string) (sqlc.Initiative, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitiativeByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Initiative)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitiativeByID indicates an expected call of GetInitiativeByID.
func (mr *MockQuerierMockRecorder) GetInitiativeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitiativeByID", reflect.TypeOf((*MockQuerier)(nil).GetInitiativeByID), arg0, arg1)
}

// GetRegionByID mocks base method.
func (m *MockQuerier) GetRegionByID(arg0 context.Context, arg1 int32) (sqlc.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionByID indicates an expected call of GetRegionByID.
func (mr *MockQuerierMockRecorder) GetRegionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionByID", reflect.TypeOf((*MockQuerier)(nil).GetRegionByID), arg0, arg1)
}

// GetSingleUserByID mocks base method.
func (m *MockQuerier) GetSingleUserByID(arg0 context.Context, arg1 string) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleUserByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleUserByID indicates an expected call of GetSingleUserByID.
func (mr *MockQuerierMockRecorder) GetSingleUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleUserByID", reflect.TypeOf((*MockQuerier)(nil).GetSingleUserByID), arg0, arg1)
}

// GetStatus mocks base method.
func (m *MockQuerier) GetStatus(arg0 context.Context, arg1 int32) (sqlc.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockQuerierMockRecorder) GetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockQuerier)(nil).GetStatus), arg0, arg1)
}

// HardDeleteBoard mocks base method.
func (m *MockQuerier) HardDeleteBoard(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteBoard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteBoard indicates an expected call of HardDeleteBoard.
func (mr *MockQuerierMockRecorder) HardDeleteBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteBoard", reflect.TypeOf((*MockQuerier)(nil).HardDeleteBoard), arg0, arg1)
}

// HardDeleteUser mocks base method.
func (m *MockQuerier) HardDeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteUser indicates an expected call of HardDeleteUser.
func (mr *MockQuerierMockRecorder) HardDeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteUser", reflect.TypeOf((*MockQuerier)(nil).HardDeleteUser), arg0, arg1)
}

// InsertDistrict mocks base method.
func (m *MockQuerier) InsertDistrict(arg0 context.Context, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDistrict", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertDistrict indicates an expected call of InsertDistrict.
func (mr *MockQuerierMockRecorder) InsertDistrict(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDistrict", reflect.TypeOf((*MockQuerier)(nil).InsertDistrict), arg0, arg1)
}

// SoftDeleteBoard mocks base method.
func (m *MockQuerier) SoftDeleteBoard(arg0 context.Context, arg1 sqlc.SoftDeleteBoardParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteBoard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteBoard indicates an expected call of SoftDeleteBoard.
func (mr *MockQuerierMockRecorder) SoftDeleteBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteBoard", reflect.TypeOf((*MockQuerier)(nil).SoftDeleteBoard), arg0, arg1)
}

// SoftDeleteUser mocks base method.
func (m *MockQuerier) SoftDeleteUser(arg0 context.Context, arg1 sqlc.SoftDeleteUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteUser indicates an expected call of SoftDeleteUser.
func (mr *MockQuerierMockRecorder) SoftDeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteUser", reflect.TypeOf((*MockQuerier)(nil).SoftDeleteUser), arg0, arg1)
}

// UpdateBoard mocks base method.
func (m *MockQuerier) UpdateBoard(arg0 context.Context, arg1 sqlc.UpdateBoardParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBoard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBoard indicates an expected call of UpdateBoard.
func (mr *MockQuerierMockRecorder) UpdateBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBoard", reflect.TypeOf((*MockQuerier)(nil).UpdateBoard), arg0, arg1)
}

// UpdateChronology mocks base method.
func (m *MockQuerier) UpdateChronology(arg0 context.Context, arg1 sqlc.UpdateChronologyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChronology", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChronology indicates an expected call of UpdateChronology.
func (mr *MockQuerierMockRecorder) UpdateChronology(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChronology", reflect.TypeOf((*MockQuerier)(nil).UpdateChronology), arg0, arg1)
}

// UpdateDistrict mocks base method.
func (m *MockQuerier) UpdateDistrict(arg0 context.Context, arg1 sqlc.UpdateDistrictParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDistrict", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDistrict indicates an expected call of UpdateDistrict.
func (mr *MockQuerierMockRecorder) UpdateDistrict(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDistrict", reflect.TypeOf((*MockQuerier)(nil).UpdateDistrict), arg0, arg1)
}

// UpdateDistrictBudget mocks base method.
func (m *MockQuerier) UpdateDistrictBudget(arg0 context.Context, arg1 sqlc.UpdateDistrictBudgetParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDistrictBudget", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDistrictBudget indicates an expected call of UpdateDistrictBudget.
func (mr *MockQuerierMockRecorder) UpdateDistrictBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDistrictBudget", reflect.TypeOf((*MockQuerier)(nil).UpdateDistrictBudget), arg0, arg1)
}

// UpdateInitiativeByID mocks base method.
func (m *MockQuerier) UpdateInitiativeByID(arg0 context.Context, arg1 sqlc.UpdateInitiativeByIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInitiativeByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInitiativeByID indicates an expected call of UpdateInitiativeByID.
func (mr *MockQuerierMockRecorder) UpdateInitiativeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInitiativeByID", reflect.TypeOf((*MockQuerier)(nil).UpdateInitiativeByID), arg0, arg1)
}

// UpdateRegion mocks base method.
func (m *MockQuerier) UpdateRegion(arg0 context.Context, arg1 sqlc.UpdateRegionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRegion indicates an expected call of UpdateRegion.
func (mr *MockQuerierMockRecorder) UpdateRegion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegion", reflect.TypeOf((*MockQuerier)(nil).UpdateRegion), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockQuerier) UpdateStatus(arg0 context.Context, arg1 sqlc.UpdateStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockQuerierMockRecorder) UpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateStatus), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockQuerier) UpdateUser(arg0 context.Context, arg1 sqlc.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockQuerierMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockQuerier)(nil).UpdateUser), arg0, arg1)
}
