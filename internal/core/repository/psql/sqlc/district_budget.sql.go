// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: district_budget.sql

package sqlc

import (
	"context"
)

const createDistrictBudget = `-- name: CreateDistrictBudget :exec
INSERT INTO district_budget (board_id, district_id, budget, updated_by)
VALUES (
        $1,
        $2,
        $3,
        $4
    )
`

type CreateDistrictBudgetParams struct {
	BoardID    string `json:"board_id"`
	DistrictID int32  `json:"district_id"`
	Budget     int32  `json:"budget"`
	UpdatedBy  string `json:"updated_by"`
}

func (q *Queries) CreateDistrictBudget(ctx context.Context, arg CreateDistrictBudgetParams) error {
	_, err := q.db.Exec(ctx, createDistrictBudget,
		arg.BoardID,
		arg.DistrictID,
		arg.Budget,
		arg.UpdatedBy,
	)
	return err
}

const deleteDistrictBoard = `-- name: DeleteDistrictBoard :exec
DELETE FROM district_budget
WHERE board_id = $1
    AND district_id = $2
`

type DeleteDistrictBoardParams struct {
	BoardID    string `json:"board_id"`
	DistrictID int32  `json:"district_id"`
}

func (q *Queries) DeleteDistrictBoard(ctx context.Context, arg DeleteDistrictBoardParams) error {
	_, err := q.db.Exec(ctx, deleteDistrictBoard, arg.BoardID, arg.DistrictID)
	return err
}

const getAllDistrictBudget = `-- name: GetAllDistrictBudget :many
SELECT board_id, district_id, budget, updated_by, created_at, updated_at
FROM district_budget
WHERE TRUE
    AND CASE
        WHEN $1::INTEGER = 0 THEN TRUE
        ELSE district_budget.board_id = $1::INTEGER
    END
    AND CASE
        WHEN $2::INTEGER = 0 THEN TRUE
        ELSE district_budget.district_id = $2::INTEGER
    END
ORDER BY created_at DESC OFFSET $3
LIMIT $4
`

type GetAllDistrictBudgetParams struct {
	BoardID    int32 `json:"board_id"`
	DistrictID int32 `json:"district_id"`
	Offset     int32 `json:"offset"`
	Limit      int32 `json:"limit"`
}

func (q *Queries) GetAllDistrictBudget(ctx context.Context, arg GetAllDistrictBudgetParams) ([]DistrictBudget, error) {
	rows, err := q.db.Query(ctx, getAllDistrictBudget,
		arg.BoardID,
		arg.DistrictID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DistrictBudget
	for rows.Next() {
		var i DistrictBudget
		if err := rows.Scan(
			&i.BoardID,
			&i.DistrictID,
			&i.Budget,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDistrictBudget = `-- name: UpdateDistrictBudget :exec
UPDATE district_budget
SET budget = $1,
    updated_by = $2,
    updated_at = now()
WHERE board_id = $3
    AND district_id = $4
`

type UpdateDistrictBudgetParams struct {
	Budget     int32  `json:"budget"`
	UpdatedBy  string `json:"updated_by"`
	BoardID    string `json:"board_id"`
	DistrictID int32  `json:"district_id"`
}

func (q *Queries) UpdateDistrictBudget(ctx context.Context, arg UpdateDistrictBudgetParams) error {
	_, err := q.db.Exec(ctx, updateDistrictBudget,
		arg.Budget,
		arg.UpdatedBy,
		arg.BoardID,
		arg.DistrictID,
	)
	return err
}
