// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: quarter.sql

package sqlc

import (
	"context"

	null "gopkg.in/guregu/null.v4"
)

const createQuarter = `-- name: CreateQuarter :one
INSERT INTO quarter(title, district_id)
VALUES ($1, $2) RETURNING id
`

type CreateQuarterParams struct {
	Title      string `json:"title"`
	DistrictID int32  `json:"district_id"`
}

func (q *Queries) CreateQuarter(ctx context.Context, arg CreateQuarterParams) (int32, error) {
	row := q.db.QueryRow(ctx, createQuarter, arg.Title, arg.DistrictID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteQuearterByID = `-- name: DeleteQuearterByID :exec
DELETE FROM quarter
WHERE id = $1
`

func (q *Queries) DeleteQuearterByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteQuearterByID, id)
	return err
}

const getAllQuarters = `-- name: GetAllQuarters :many
SELECT id, title, district_id
FROM quarter
WHERE quarter.title ilike '%' || $1::VARCHAR || '%'
    AND CASE
        WHEN $2::INTEGER = 0 THEN TRUE
        ELSE quarter.district_id = $2::INTEGER
    END
LIMIT $4 OFFSET $3
`

type GetAllQuartersParams struct {
	Search     string `json:"search"`
	DistrictID int32  `json:"district_id"`
	Offset     int32  `json:"offset_"`
	Limit      int32  `json:"limit_"`
}

func (q *Queries) GetAllQuarters(ctx context.Context, arg GetAllQuartersParams) ([]Quarter, error) {
	rows, err := q.db.Query(ctx, getAllQuarters,
		arg.Search,
		arg.DistrictID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quarter
	for rows.Next() {
		var i Quarter
		if err := rows.Scan(&i.ID, &i.Title, &i.DistrictID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllQuartersCount = `-- name: GetAllQuartersCount :one
SELECT COUNT(1)
FROM quarter
WHERE quarter.title ilike '%' || $1::VARCHAR || '%'
    AND CASE
        WHEN $2::INTEGER = 0 THEN TRUE
        ELSE quarter.district_id = $2::INTEGER
    END
`

type GetAllQuartersCountParams struct {
	Search     string `json:"search"`
	DistrictID int32  `json:"district_id"`
}

func (q *Queries) GetAllQuartersCount(ctx context.Context, arg GetAllQuartersCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getAllQuartersCount, arg.Search, arg.DistrictID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getQuarterByDistrictID = `-- name: GetQuarterByDistrictID :many
SELECT id, title, district_id
FROM quarter
WHERE district_id = $1
`

func (q *Queries) GetQuarterByDistrictID(ctx context.Context, districtID int32) ([]Quarter, error) {
	rows, err := q.db.Query(ctx, getQuarterByDistrictID, districtID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quarter
	for rows.Next() {
		var i Quarter
		if err := rows.Scan(&i.ID, &i.Title, &i.DistrictID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuarterByID = `-- name: GetQuarterByID :one
SELECT id, title, district_id
FROM quarter
WHERE id = $1
`

func (q *Queries) GetQuarterByID(ctx context.Context, id int32) (Quarter, error) {
	row := q.db.QueryRow(ctx, getQuarterByID, id)
	var i Quarter
	err := row.Scan(&i.ID, &i.Title, &i.DistrictID)
	return i, err
}

const updateQuarter = `-- name: UpdateQuarter :exec
UPDATE quarter
SET title = COALESCE($1, title),
    district_id = COALESCE($2, disrtict_id)
WHERE id = $3
`

type UpdateQuarterParams struct {
	Title      null.String `json:"title"`
	DistrictID null.Int    `json:"district_id"`
	ID         int32       `json:"id"`
}

func (q *Queries) UpdateQuarter(ctx context.Context, arg UpdateQuarterParams) error {
	_, err := q.db.Exec(ctx, updateQuarter, arg.Title, arg.DistrictID, arg.ID)
	return err
}
