// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: board.sql

package sqlc

import (
	"context"
	"time"

	null "gopkg.in/guregu/null.v4"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO board(
        title,
        icon,
        total_amount,
        accept_start_date,
        accept_end_date,
        review_start_date,
        review_end_date,
        voting_start_date,
        voting_end_date
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9
    ) RETURNING id
`

type CreateBoardParams struct {
	Title           null.String `json:"title"`
	Icon            null.String `json:"icon"`
	TotalAmount     null.Int    `json:"total_amount"`
	AcceptStartDate time.Time   `json:"accept_start_date"`
	AcceptEndDate   time.Time   `json:"accept_end_date"`
	ReviewStartDate time.Time   `json:"review_start_date"`
	ReviewEndDate   time.Time   `json:"review_end_date"`
	VotingStartDate time.Time   `json:"voting_start_date"`
	VotingEndDate   time.Time   `json:"voting_end_date"`
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) (string, error) {
	row := q.db.QueryRow(ctx, createBoard,
		arg.Title,
		arg.Icon,
		arg.TotalAmount,
		arg.AcceptStartDate,
		arg.AcceptEndDate,
		arg.ReviewStartDate,
		arg.ReviewEndDate,
		arg.VotingStartDate,
		arg.VotingEndDate,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getAllBoards = `-- name: GetAllBoards :many
SELECT id, title, icon, total_amount, accept_start_date, accept_end_date, review_start_date, review_end_date, voting_start_date, voting_end_date, created_at, updated_at
FROM board
WHERE board.title ilike '%' || $1::VARCHAR || '%'
ORDER BY created_at DESC OFFSET $2
LIMIT $3
`

type GetAllBoardsParams struct {
	Search string `json:"search"`
	Offset int32  `json:"offset"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) GetAllBoards(ctx context.Context, arg GetAllBoardsParams) ([]Board, error) {
	rows, err := q.db.Query(ctx, getAllBoards, arg.Search, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Icon,
			&i.TotalAmount,
			&i.AcceptStartDate,
			&i.AcceptEndDate,
			&i.ReviewStartDate,
			&i.ReviewEndDate,
			&i.VotingStartDate,
			&i.VotingEndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBoardsCount = `-- name: GetAllBoardsCount :one
SELECT COUNT(1)
FROM board
WHERE board.title ilike '%' || $1::VARCHAR || '%'
`

func (q *Queries) GetAllBoardsCount(ctx context.Context, search string) (int64, error) {
	row := q.db.QueryRow(ctx, getAllBoardsCount, search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getBoardByID = `-- name: GetBoardByID :one
SELECT id, title, icon, total_amount, accept_start_date, accept_end_date, review_start_date, review_end_date, voting_start_date, voting_end_date, created_at, updated_at
FROM board
WHERE id = $1
`

func (q *Queries) GetBoardByID(ctx context.Context, id string) (Board, error) {
	row := q.db.QueryRow(ctx, getBoardByID, id)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Icon,
		&i.TotalAmount,
		&i.AcceptStartDate,
		&i.AcceptEndDate,
		&i.ReviewStartDate,
		&i.ReviewEndDate,
		&i.VotingStartDate,
		&i.VotingEndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hardDeleteBoard = `-- name: HardDeleteBoard :exec
DELETE FROM board
WHERE id = $1
`

func (q *Queries) HardDeleteBoard(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, hardDeleteBoard, id)
	return err
}

const softDeleteBoard = `-- name: SoftDeleteBoard :exec
UPDATE board
SET status = $1::INTEGER,
    updated_at = now()
WHERE id = $2
`

type SoftDeleteBoardParams struct {
	Status int32  `json:"status"`
	ID     string `json:"id"`
}

func (q *Queries) SoftDeleteBoard(ctx context.Context, arg SoftDeleteBoardParams) error {
	_, err := q.db.Exec(ctx, softDeleteBoard, arg.Status, arg.ID)
	return err
}

const updateBoard = `-- name: UpdateBoard :exec
UPDATE board
SET title = COALESCE($1, title),
    icon = COALESCE($2, icon),
    total_amount = COALESCE($3, total_amount),
    accept_start_date = COALESCE(
        $4,
        accept_start_date
    ),
    accept_end_date = COALESCE($5, accept_end_date),
    review_start_date = COALESCE(
        $6,
        review_start_date
    ),
    review_end_date = COALESCE($7, review_end_date),
    voting_start_date = COALESCE(
        $8,
        voting_start_date
    ),
    voting_end_date = COALESCE($9, voting_end_date),
    updated_at = now()
WHERE id = $10
`

type UpdateBoardParams struct {
	Title           null.String `json:"title"`
	Icon            null.String `json:"icon"`
	TotalAmount     null.Int    `json:"total_amount"`
	AcceptStartDate null.Time   `json:"accept_start_date"`
	AcceptEndDate   null.Time   `json:"accept_end_date"`
	ReviewStartDate null.Time   `json:"review_start_date"`
	ReviewEndDate   null.Time   `json:"review_end_date"`
	VotingStartDate null.Time   `json:"voting_start_date"`
	VotingEndDate   null.Time   `json:"voting_end_date"`
	ID              string      `json:"id"`
}

func (q *Queries) UpdateBoard(ctx context.Context, arg UpdateBoardParams) error {
	_, err := q.db.Exec(ctx, updateBoard,
		arg.Title,
		arg.Icon,
		arg.TotalAmount,
		arg.AcceptStartDate,
		arg.AcceptEndDate,
		arg.ReviewStartDate,
		arg.ReviewEndDate,
		arg.VotingStartDate,
		arg.VotingEndDate,
		arg.ID,
	)
	return err
}
