// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package sqlc

import (
	"context"

	null "gopkg.in/guregu/null.v4"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (fullname, phone_number, region_id, district_id)
VALUES ($1, $2, $3, $4) RETURNING id
`

type CreateUserParams struct {
	Fullname    string `json:"fullname"`
	PhoneNumber string `json:"phone_number"`
	RegionID    int32  `json:"region_id"`
	DistrictID  int32  `json:"district_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Fullname,
		arg.PhoneNumber,
		arg.RegionID,
		arg.DistrictID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, fullname, phone_number, role, username, password, status, region_id, district_id, created_at, updated_at
FROM users
WHERE users.fullname ilike '%' || $1::VARCHAR || '%'
    AND CASE
        WHEN $2::INTEGER = 0 THEN TRUE
        ELSE users.region_id = $2::INTEGER
    END
    AND CASE
        WHEN $3::INTEGER = 0 THEN TRUE
        ELSE users.district_id = $3::INTEGER
    END
    AND CASE
        WHEN $4::INTEGER = 0 THEN TRUE
        ELSE users.status = $4::INTEGER
    END
ORDER BY created_at DESC OFFSET $5
LIMIT $6
`

type GetAllUsersParams struct {
	Search     string `json:"search"`
	RegionID   int32  `json:"region_id"`
	DistrictID int32  `json:"district_id"`
	Status     int32  `json:"status"`
	Offset     int32  `json:"offset"`
	Limit      int32  `json:"limit"`
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers,
		arg.Search,
		arg.RegionID,
		arg.DistrictID,
		arg.Status,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.PhoneNumber,
			&i.Role,
			&i.Username,
			&i.Password,
			&i.Status,
			&i.RegionID,
			&i.DistrictID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersCount = `-- name: GetAllUsersCount :one
SELECT COUNT(1)
FROM users
WHERE users.fullname ilike '%' || $1::VARCHAR || '%'
    AND CASE
        WHEN $2::INTEGER = 0 THEN TRUE
        ELSE users.region_id = $2::INTEGER
    END
    AND CASE
        WHEN $3::INTEGER = 0 THEN TRUE
        ELSE users.district_id = $3::INTEGER
    END
    AND CASE
        WHEN $4::INTEGER = 0 THEN TRUE
        ELSE users.status = $4::INTEGER
    END
`

type GetAllUsersCountParams struct {
	Search     string `json:"search"`
	RegionID   int32  `json:"region_id"`
	DistrictID int32  `json:"district_id"`
	Status     int32  `json:"status"`
}

func (q *Queries) GetAllUsersCount(ctx context.Context, arg GetAllUsersCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getAllUsersCount,
		arg.Search,
		arg.RegionID,
		arg.DistrictID,
		arg.Status,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleUserByID = `-- name: GetSingleUserByID :one
SELECT id, fullname, phone_number, role, username, password, status, region_id, district_id, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetSingleUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getSingleUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.PhoneNumber,
		&i.Role,
		&i.Username,
		&i.Password,
		&i.Status,
		&i.RegionID,
		&i.DistrictID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hardDeleteUser = `-- name: HardDeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) HardDeleteUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, hardDeleteUser, id)
	return err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET status = $1::INTEGER,
    updated_at = now()
WHERE id = $2
`

type SoftDeleteUserParams struct {
	Status int32  `json:"status"`
	ID     string `json:"id"`
}

func (q *Queries) SoftDeleteUser(ctx context.Context, arg SoftDeleteUserParams) error {
	_, err := q.db.Exec(ctx, softDeleteUser, arg.Status, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET fullname = COALESCE($1, fullname),
    phone_number = COALESCE($2, phone_number),
    region_id = COALESCE($3, region_id),
    district_id = COALESCE($4, district_id),
    username = COALESCE($5, username),
    password = COALESCE($6, password),
    role = COALESCE($7, role),
    status = COALESCE($8, status),
    updated_at = now()
WHERE id = $9
`

type UpdateUserParams struct {
	Fullname    null.String `json:"fullname"`
	PhoneNumber null.String `json:"phone_number"`
	RegionID    null.Int    `json:"region_id"`
	DistrictID  null.Int    `json:"district_id"`
	Username    null.String `json:"username"`
	Password    null.String `json:"password"`
	Role        null.String `json:"role"`
	Status      null.Int    `json:"status"`
	ID          string      `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Fullname,
		arg.PhoneNumber,
		arg.RegionID,
		arg.DistrictID,
		arg.Username,
		arg.Password,
		arg.Role,
		arg.Status,
		arg.ID,
	)
	return err
}
