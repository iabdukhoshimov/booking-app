// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: status.sql

package sqlc

import (
	"context"
)

const createStatus = `-- name: CreateStatus :one
INSERT INTO status (title)
VALUES ($1) RETURNING id
`

func (q *Queries) CreateStatus(ctx context.Context, title string) (int32, error) {
	row := q.db.QueryRow(ctx, createStatus, title)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteStatus = `-- name: DeleteStatus :exec
DELETE FROM status
WHERE id = $1
`

func (q *Queries) DeleteStatus(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteStatus, id)
	return err
}

const getStatus = `-- name: GetStatus :one
SELECT id, title
FROM status
WHERE id = $1
`

func (q *Queries) GetStatus(ctx context.Context, id int32) (Status, error) {
	row := q.db.QueryRow(ctx, getStatus, id)
	var i Status
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE status
SET title = $1
WHERE id = $2
`

type UpdateStatusParams struct {
	Title string `json:"title"`
	ID    int32  `json:"id"`
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.Exec(ctx, updateStatus, arg.Title, arg.ID)
	return err
}
