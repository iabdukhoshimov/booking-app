// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: region.sql

package sqlc

import (
	"context"
)

const createRegion = `-- name: CreateRegion :one
INSERT INTO region (title)
VALUES ($1) RETURNING id
`

func (q *Queries) CreateRegion(ctx context.Context, title string) (int32, error) {
	row := q.db.QueryRow(ctx, createRegion, title)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteRegion = `-- name: DeleteRegion :exec
DELETE FROM region
WHERE id = $1
`

func (q *Queries) DeleteRegion(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRegion, id)
	return err
}

const getAllRegions = `-- name: GetAllRegions :many
SELECT id, title
FROM region
WHERE region.title ilike '%' || $1::VARCHAR || '%'
LIMIT $3 OFFSET $2
`

type GetAllRegionsParams struct {
	Search string `json:"search"`
	Offset int32  `json:"offset_"`
	Limit  int32  `json:"limit_"`
}

func (q *Queries) GetAllRegions(ctx context.Context, arg GetAllRegionsParams) ([]Region, error) {
	rows, err := q.db.Query(ctx, getAllRegions, arg.Search, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Region
	for rows.Next() {
		var i Region
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRegionsCount = `-- name: GetAllRegionsCount :one
SELECT COUNT(1)
FROM region
WHERE region.title ilike '%' || $1::VARCHAR || '%'
`

func (q *Queries) GetAllRegionsCount(ctx context.Context, search string) (int64, error) {
	row := q.db.QueryRow(ctx, getAllRegionsCount, search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getRegionByID = `-- name: GetRegionByID :one
SELECT id, title
FROM region
WHERE id = $1
`

func (q *Queries) GetRegionByID(ctx context.Context, id int32) (Region, error) {
	row := q.db.QueryRow(ctx, getRegionByID, id)
	var i Region
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const updateRegion = `-- name: UpdateRegion :exec
UPDATE region
SET title = $1
WHERE id = $2
`

type UpdateRegionParams struct {
	Title string `json:"title"`
	ID    int32  `json:"id"`
}

func (q *Queries) UpdateRegion(ctx context.Context, arg UpdateRegionParams) error {
	_, err := q.db.Exec(ctx, updateRegion, arg.Title, arg.ID)
	return err
}
